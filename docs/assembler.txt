Assembler

Directives

<b>.method_start method_name method_descriptor</b>

    This directive implies that we are starting a method called 'method_name' with
    descriptor 'method_descriptor'. The method descriptor is created based on the 
    explanation from the java documentation, as quoted below:

    <quote>

    A method descriptor represents the parameters that the method takes and the
    value that it returns:

    MethodDescriptor:
        (ParameterDescriptor*)ReturnDescriptor

    A parameter descriptor represents a parameter passed to a method:

    ParameterDescriptor:
        FieldType

    FieldType:
        BaseType
        ObjectType
        ArrayType

    BaseType:
        B
        C
        D
        F
        I
        J
        S
        Z

    ObjectType:
        L Classname ;

    ArrayType:
        [ ComponentType

    A return descriptor represents the type of the value returned from a method. It
    is a series of characters generated by the grammar:

        ReturnDescriptor:
            FieldType
            VoidDescriptor

        VoidDescriptor:
            V

    The character V indicates that the method returns no value (its return type
    is void).
    A method descriptor is valid only if it represents method parameters with a
    total length of 255 or less, where that length includes the contribution for
    this in the case of instance or interface method invocations. The total length
    is calculated by summing the contributions of the individual parameters, where
    a parameter of type long or double contributes two units to the length and a
    parameter of any other type contributes one unit.

    For example, the method descriptor for the method

    Object mymethod(int i, double d, Thread t)
    is
    (IDLjava/lang/Thread;)Ljava/lang/Object;

    Note that the internal forms of the binary names of Thread and Object are used
    in the method descriptor.
    The method descriptor for mymethod is the same whether mymethod is a class or
    an instance method. Although an instance method is passed this, a reference to
    the current class instance, in addition to its intended parameters, that fact
    is not reflected in the method descriptor. The reference to this is passed
    implicitly by the method invocation instructions of the Java virtual machine
    used to invoke instance methods. A reference to this is not passed to a class
    method.

    </quote>

    So, for example, the following

    .method main ([Ljava/lang/String;)V

    creates a method as:

    public void main (String [] args)

    Example:

    <syntaxhighlight lang="jasm">
        .method main ([Ljava/lang/String;)V
        .method_end
    </syntaxhighlight>

<b>.method_end</b>

    Just a marker to identify the end of the method started with .method_start

<b>.byte</b>
    Creates an alias to a byte. The value created by this directive will be
    replaced directly by its value in the compiled code.
    The accepted values for this type are between 0 and 255 or 0x00 and 0xFF.

    For example, suppose the following code:

    .method_start myMethod ()V
        .byte $myByte 0x10
        
        bipush $myByte
    .end_method

    Will be translated to:

    .method_start myMethod ()V
        bipush 0x10
    .end_method

    No entries are created in the constant_pool for this byte variable

<b>.int</b>
    Creates a CONSTANT_INTEGER in the constant_pool and allows the variable to
    be used in the assembly code as a reference to the created variable.

    Example:

    .method_start myMethod ()V
        .int $myInt 1234
        
        ldc $myInt
    .end_method
    

assembly

<b>nop</b>
    No OPeration. Does nothing

    Example:

    <syntaxhighlight lang="jasm">
        .method main ([Ljava/lang/String;)V
        .method_end
    </syntaxhighlight>

<b>aconst_null</b>
    Pushes a null to the stack.
    The max_stack attribute is automatically incremented by this operation

    Example:
    <syntaxhighlight lang="jasm">
        .method main ([Ljava/lang/String;)V
            aconst_null
        .method_end
    </syntaxhighlight>

<b>iconst_m1</b>
    Pushes the integer -1 to the stack.
    The max_stack attribute is automatically incremented by this operation

    Example:
    <syntaxhighlight lang="jasm">
        .method main ([Ljava/lang/String;)V
            iconst_m1
        .method_end
    </syntaxhighlight>

<b>iconst_0</b>
    Pushes the integer 0 to the stack.
    The max_stack attribute is automatically incremented by this operation

    Example:
    <syntaxhighlight lang="jasm">
        .method main ([Ljava/lang/String;)V
            iconst_0
        .method_end
    </syntaxhighlight>
    
<b>iconst_1</b>
    Pushes the integer 1 to the stack.
    The max_stack attribute is automatically incremented by this operation

    Example:
    <syntaxhighlight lang="jasm">
        .method main ([Ljava/lang/String;)V
            iconst_1
        .method_end
    </syntaxhighlight>

<b>iconst_2</b>
    Pushes the integer 2 to the stack.
    The max_stack attribute is automatically incremented by this operation

    Example:
    <syntaxhighlight lang="jasm">
        .method main ([Ljava/lang/String;)V
            iconst_2
        .method_end
    </syntaxhighlight>

<b>iconst_3</b>
    Pushes the integer 3 to the stack.
    The max_stack attribute is automatically incremented by this operation

    Example:
    <syntaxhighlight lang="jasm">
        .method main ([Ljava/lang/String;)V
            iconst_3
        .method_end
    </syntaxhighlight>

<b>iconst_4</b>
    Pushes the integer 4 to the stack.
    The max_stack attribute is automatically incremented by this operation

    Example:
    <syntaxhighlight lang="jasm">
        .method main ([Ljava/lang/String;)V
            iconst_4
        .method_end
    </syntaxhighlight>

<b>iconst_5</b>
    Pushes the integer 5 to the stack.
    The max_stack attribute is automatically incremented by this operation

    Example:
    <syntaxhighlight lang="jasm">
        .method main ([Ljava/lang/String;)V
            iconst_5
        .method_end
    </syntaxhighlight>

<b>lconst_0</b>
    Pushes the long constant 0 to the stack.
    The max_stack attribute is automatically incremented by this operation

    Example:
    <syntaxhighlight lang="jasm">
        .method main ([Ljava/lang/String;)V
            lconst_0
        .method_end
    </syntaxhighlight>
    
<b>lconst_1</b>
    Pushes the long constant 1 to the stack.
    The max_stack attribute is automatically incremented by this operation

    Example:
    <syntaxhighlight lang="jasm">
        .method main ([Ljava/lang/String;)V
            lconst_1
        .method_end
    </syntaxhighlight>

<b>fconst_0</b>
    Pushes the float constant 0.0 to the stack.
    The max_stack attribute is automatically incremented by this operation

    Example:
    <syntaxhighlight lang="jasm">
        .method main ([Ljava/lang/String;)V
            fconst_0
        .method_end
    </syntaxhighlight>
    
<b>fconst_1</b>
    Pushes the float constant 1.0 to the stack.
    The max_stack attribute is automatically incremented by this operation

    Example:
    <syntaxhighlight lang="jasm">
        .method main ([Ljava/lang/String;)V
            fconst_1
        .method_end
    </syntaxhighlight>

<b>fconst_2</b>
    Pushes the float constant 2.0 to the stack.
    The max_stack attribute is automatically incremented by this operation

    Example:
    <syntaxhighlight lang="jasm">
        .method main ([Ljava/lang/String;)V
            fconst_2
        .method_end
    </syntaxhighlight>

<b>dconst_0</b>
    Pushes the double constant 0.0 to the stack.
    The max_stack attribute is automatically incremented by this operation

    Example:
    <syntaxhighlight lang="jasm">
        .method main ([Ljava/lang/String;)V
            dconst_0
        .method_end
    </syntaxhighlight>
    
<b>dconst_1</b>
    Pushes the double constant 1.0 to the stack.
    The max_stack attribute is automatically incremented by this operation

    Example:
    <syntaxhighlight lang="jasm">
        .method main ([Ljava/lang/String;)V
            dconst_1
        .method_end
    </syntaxhighlight>

<b>bipush <byte></b>
<b>bipush $identifier</b>
    Pushes <byte> or the value of $identifier to the stack.
    $identifier needs to be of type .byte
    The max_stack attribute is automatically incremented by this operation

    Example:
    <syntaxhighlight lang="jasm">
        .method main ([Ljava/lang/String;)V
            .byte $myByte 123
            
            bipush 0x42
            bipush $myByte
        .method_end
    </syntaxhighlight>

<b>sipush <short></b>
<b>sipush $identifier</b>
    Pushes <short> or the value of $identifier to the stack.
    $identifier needs to be of type .int
    Even thou the <short> type is not specified, it is expected that the value
    of the int identifier to be between 0x0000 and 0xFFFF. Otherwise an error
    is thrown.
    The max_stack attribute is automatically incremented by this operation

    Example:
    <syntaxhighlight lang="jasm">
        .method main ([Ljava/lang/String;)V
            .int $myShort 1234
            
            sipush 0x4201
            sipush $myShort
        .method_end
    </syntaxhighlight>

<b></b>
<b></b>
<b></b>
<b></b>
<b></b>
<b></b>
<b></b>
<b></b>
<b></b>
<b></b>
